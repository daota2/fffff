* add ValOp
** use Lookup
** add Sym Compile
*** compile to lit if quoted
** otherwise val
** commit
* compile let body with separate envs
* rewrite mac prim
** bind id in env unless _
** test macro
* rewrite if prim
** compile branches using separate envs
*** add env.Unify(rhs)
*** add UndefType/g.UNDEF
**** struct Undef { valType Type }
**** return valType from Type, UndefType if nil
**** throw error on Eval
**** add Type/BasicType.Undef(valType Type) Undef
* add FuncallOp
* add BenchOp
* fib_rec
* testcompile.gf
* --
* change Extenv to extract symbols at compile time
* add sync.Pool for Env vars in G
** https://medium.com/@blanchon.vincent/go-understand-the-design-of-sync-pool-2dde3024e277
* add switch val-arg
** inject into vec-conds if != _
* add set-val to root env
** (set (val 'foo) 42)
* add universal negation
** Any/not
** !done? => !(done?)
** (!pop in) => !(pop in)
*** call from g.Not(val)
*** add NewNotOp(body...Op)
*** handle ! in *Sym
**** emit NotOp around id
*** handle ! in Vec
**** emit NotOp around vec compile
* move find-key to lib
