* fix testloop.gf
* fix test/all.gf
* switch Vec to val semantics
** replace []Val with Vec everywhere
** replace access with Get
** replace return with Push/Peek/Pop
* switch Val.Init to return by value
** grep ".Init(" and simplify
* remove Type/Val.New
** Vec, Sym
** remove Meta.Call
** use regular funs 
*** *vec/sym etc.
* --
* replace for-prim with loop macro
* change push fun to return vec
* add expand(form n?) fun
* add let places
** (let (let-foo (v x) (dump (+ x v)) _) (let (foo 35) 7))
*** pass value first
** find 'let-x' in env if expr otherwise id/var
** return prev value
*** backup/restore in scoped let
**** call 'del-x' if found when prev is nil
* transducers

(>> (filter odd?) (map (fun (x) (x 42 +))))
