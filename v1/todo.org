* add chan test
** readme
* add Env.Update(key, func(Val) (Val, E)) E
** add Var.env, set on put
*** follow on update
** enable whle-test in /all
* simplify args
** pass as Vec, not []*Sym
* replace opt with nested Vec
** foo? -> (foo _)
** remove Opt type
** add _? fun
*** true if nil
* add for-var support
** (for (10 i) ...)
*** always expect Vec
**** update test/bench
** add bench/stack
*** grab from snigl
* change bench to take vec arg for reps
** update bench/
* add load fun
** add Str type
* add coro/coret g-fu macros
** based on task
** call through inbox
* dlambda
** https://letoverlambda.com/index.cl/guest/chap5.html#sec_7
** add map fun
** add case macro
* convert test to gfu macro
** add lib/test.gf
** load in test/all.gf
** add throw fun
*** switch BasicE.msg from string to Val
* fix test/all while loop
* optimize vec splats
** don't allocate new vec if no splats
* add lib/iter.gf
** move loops from testloop.gf
** load iter.gf from test/all
* add expand(form n?) fun
* vec iter
* transducers
* replace for-prim with loop macro
** add lib/iter.gf
* add bang calls
** add separate Bang type
*** store target
*** ! reader support
*** quote as '(xxx)
** update loop test/readme

(>> (filter odd?) (map (fun (x) (x 42 +))))
