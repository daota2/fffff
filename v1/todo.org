* dup parent type envs when deriving
** move (iter) to SeqType
** update lib/tests
* add Env iter
** return key and val separately
** copy Vec
*** (while (do (let v (pop in)) (not (_? v)))
* add iter readme
* ---
* add do/let/set/vals to type envs
** (Int/let foo 'bar)
** BasicType.Init
* move bench/find-key/test to lib
* move new-sym to Sym/new
* replace Type/BasicType with Env
** change Type to struct embedding Env
*** add concrete types for type checking
**** BasicIterType { SeqType }
**** IterType { BasicIterType } 
** switch args from Type to *Type
** convert fields/methods to bindings
*** change val funcs to lookup methods
* ---
* demo/abs.gf
** add sim arg to run
*** forward this-sim
** add sim.pressure 
*** use if tank is empty
*** use if no port.io
** run until t1 is empty
** add dt arg to sim/run

contextual programming
