* add BasicVal with default imps
** use as base for Nil/Vec/Sym/Fun/Macro/Prim/Wrap
* fix test/all while loop
* add @ reader support
** add Pos type
** replace with current pos
* simplify args
** pass as Vec, not []*Sym
* optimize vec splats
** don't allocate new vec if no splats
** bench
* add lib/iter.gf
** move loops from testloop.gf
** add Str type
** add load fun
** load iter.gf from test/all
* add expand(form n?) fun
* vec iter
* transducers
* replace for-prim with loop macro
** add lib/iter.gf

(>> (filter odd?) (map (fun (x) (x 42 +))))

(let loop (macro (body..)
  (let done !g-sym result !g-sym)
  
  '(let (break (macro (args..) '(recall T %args..)))
     !(fun (%done? %result..)
        (if %done %result.. (do %body.. !recall))))))

(dump (loop (dump 'foo) (break 'bar) (dump 'baz)))

(let while (macro (cond body..)
  '(loop
     (if %cond _ !break)
     %body..)))

(let (i 0)
  (while (< i 7)
    (dump i)
    (inc i)))
* add bang calls
** add separate Bang type
*** store target
*** ! reader support
*** quote as '(xxx)
** update loop test/readme
