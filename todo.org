* add Op/BasicOp types
* add Ops alias
* add compile phase Form->Ops
** move Eval to Op
** add Form.Compile
* switch Fun body to Ops
* add (LET) macro
** run at compile time
** compile body with bindings
** propagate values
* add g.stack
** keep track of stack size when compiling
** push/pop in LetOp
** access by index from end in GetOp

* g.Sym type
* def-prim like let
** set in current env
** add Var.def_env
*** change let to backup/restore if set
* add (DO) macro
** like do but compile time
* only clone env when used
** let/args

* switch Int to big.Int
* add Rat type
** use big.Rat
* use ':' to type annotate exprs/args
** (Vec 1 2 3:Int):Vec[Int]
** (fun[A B] (a:A b:B) (+ a b))
